#!/usr/bin/env node

/**
 * UX Audit Runner Script
 * Runs the automated UX functional audit and generates a report
 */

import { UXFunctionalAuditor } from '../src/utils/UXFunctionalAuditor.js';
import fs from 'fs';
import path from 'path';

async function runUXAudit() {
  console.log('🔍 Starting UX Functional Audit...');
  
  try {
    const auditor = new UXFunctionalAuditor();
    const auditReport = await auditor.runComprehensiveAudit();
    
    // Generate report filename with timestamp
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const reportPath = path.join(process.cwd(), 'docs', `UX_AUDIT_REPORT_${timestamp}.md`);
    
    // Generate detailed report
    const report = generateMarkdownReport(auditReport);
    
    // Ensure docs directory exists
    const docsDir = path.join(process.cwd(), 'docs');
    if (!fs.existsSync(docsDir)) {
      fs.mkdirSync(docsDir, { recursive: true });
    }
    
    // Write report to file
    fs.writeFileSync(reportPath, report);
    
    console.log('✅ UX Audit completed successfully!');
    console.log(`📄 Report saved to: ${reportPath}`);
    console.log(`📊 Overall Score: ${auditReport.overallScore.toFixed(2)}%`);
    
    // Print summary to console
    console.log('\n📋 AUDIT SUMMARY');
    console.log('================');
    console.log(`Flow Score: ${auditReport.categoryScores.flow.toFixed(2)}%`);
    console.log(`Follow-through Score: ${auditReport.categoryScores.followThrough.toFixed(2)}%`);
    console.log(`Capacity Score: ${auditReport.categoryScores.capacity.toFixed(2)}%`);
    console.log(`Capability Score: ${auditReport.categoryScores.capability.toFixed(2)}%`);
    
    if (auditReport.recommendations.length > 0) {
      console.log('\n🔧 TOP RECOMMENDATIONS');
      console.log('======================');
      auditReport.recommendations.slice(0, 5).forEach((rec, index) => {
        console.log(`${index + 1}. ${rec.title} (${rec.priority})`);
      });
    }
    
  } catch (error) {
    console.error('❌ UX Audit failed:', error);
    process.exit(1);
  }
}

function generateMarkdownReport(auditReport) {
  const timestamp = new Date().toISOString();
  
  let report = `# UX Functional Audit Report

**Generated:** ${timestamp}
**Overall Score:** ${auditReport.overallScore.toFixed(2)}%

## Executive Summary

This report provides a comprehensive analysis of the Tactical Intel Dashboard's functional UX capabilities, focusing on user flow, follow-through mechanisms, system capacity, and feature capabilities.

## Category Scores

| Category | Score | Status |
|----------|-------|--------|
| Flow | ${auditReport.categoryScores.flow.toFixed(2)}% | ${getScoreStatus(auditReport.categoryScores.flow)} |
| Follow-through | ${auditReport.categoryScores.followThrough.toFixed(2)}% | ${getScoreStatus(auditReport.categoryScores.followThrough)} |
| Capacity | ${auditReport.categoryScores.capacity.toFixed(2)}% | ${getScoreStatus(auditReport.categoryScores.capacity)} |
| Capability | ${auditReport.categoryScores.capability.toFixed(2)}% | ${getScoreStatus(auditReport.categoryScores.capability)} |

## Detailed Results

`;

  // Add test results
  auditReport.results.forEach(result => {
    report += `### ${result.testName}
- **Status:** ${result.passed ? '✅ PASSED' : '❌ FAILED'}
- **Score:** ${result.score.toFixed(2)}%
- **Duration:** ${result.duration}ms

`;
    if (result.details) {
      report += `**Details:** ${result.details}\n\n`;
    }
  });

  // Add metrics
  if (auditReport.metrics.length > 0) {
    report += `## Performance Metrics

| Metric | Value | Category |
|--------|-------|----------|
`;
    auditReport.metrics.forEach(metric => {
      report += `| ${metric.metric} | ${metric.value} ${metric.unit} | ${metric.category} |\n`;
    });
    report += '\n';
  }

  // Add recommendations
  if (auditReport.recommendations.length > 0) {
    report += `## Recommendations

`;
    auditReport.recommendations.forEach((rec, index) => {
      report += `### ${index + 1}. ${rec.title} (${rec.priority})

${rec.description}

**Impact:** ${rec.impact}

---

`;
    });
  }

  report += `## Conclusion

The UX audit has identified ${auditReport.results.filter(r => !r.passed).length} areas for improvement out of ${auditReport.results.length} total tests. Focus should be placed on ${auditReport.recommendations.length > 0 ? auditReport.recommendations[0].title.toLowerCase() : 'system optimization'} to improve overall user experience.

Generated by TacticalIntelDashboard UX Functional Auditor v1.0
`;

  return report;
}

function getScoreStatus(score) {
  if (score >= 90) return '🟢 Excellent';
  if (score >= 75) return '🟡 Good';
  if (score >= 60) return '🟠 Fair';
  return '🔴 Needs Improvement';
}

// Run the audit
runUXAudit().catch(console.error);
